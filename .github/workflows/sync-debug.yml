name: Debug list Projects v2
on:
  workflow_dispatch:
    inputs:
      owner:
        description: "org or username to scan"
        required: true
        default: "phys-sims"

jobs:
  list-projects:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      repository-projects: read
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const owner = core.getInput("owner");
            async function listOrg(login){
              const q = `
                query($login:String!){
                  organization(login:$login){
                    projectsV2(first:50){
                      nodes { id number title url }
                    }
                  }
                }`;
              try {
                const { organization } = await github.graphql(q, { login });
                if (!organization) { core.info("No org found: " + login); return; }
                core.info("ORG projects for " + login + ":");
                for (const p of organization.projectsV2.nodes || []) {
                  core.info("  #" + p.number + "  " + p.title + "  " + p.url + "  (id=" + p.id + ")");
                }
              } catch(e){ core.info("Org query failed: " + e.message); }
            }
            async function listUser(login){
              const q = `
                query($login:String!){
                  user(login:$login){
                    projectsV2(first:50){
                      nodes { id number title url }
                    }
                  }
                }`;
              try {
                const { user } = await github.graphql(q, { login });
                if (!user) { core.info("No user found: " + login); return; }
                core.info("USER projects for " + login + ":");
                for (const p of user.projectsV2.nodes || []) {
                  core.info("  #" + p.number + "  " + p.title + "  " + p.url + "  (id=" + p.id + ")");
                }
              } catch(e){ core.info("User query failed: " + e.message); }
            }
            await listOrg(owner);
            await listUser(owner);
